name: Precompile NIFs

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  # push:
  #   tags:
  #     - "v*"

permissions:
  contents: write

jobs:
  linux:
    runs-on: ubuntu-latest
    env:
      MIX_ENV: "prod"
    strategy:
      fail-fast: false
      matrix:
        include:
          - pair:
              elixir: 1.13
              otp: 22
          - pair:
              elixir: 1.16
              otp: 24
          - pair:
              elixir: 1.18
              otp: 27
    steps:
      - uses: actions/checkout@v4
      - name: Set up Elixir
        uses: erlef/setup-beam@5304e04ea2b355f03681464e683d92e3b2f18451 # v1
        with:
          otp-version: ${{matrix.pair.otp}}
          elixir-version: ${{matrix.pair.elixir}}
      - name: Install Protoc
        uses: arduino/setup-protoc@f4d5893b897028ff5739576ea0409746887fa536 # v3
      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential automake autoconf pkg-config bc m4 unzip zip \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
      - name: Get musl cross-compilers
        run: |
          for musl_arch in x86_64 aarch64 riscv64
          do
            wget "https://musl.cc/${musl_arch}-linux-musl-cross.tgz" -O "${musl_arch}-linux-musl-cross.tgz"
            tar -xf "${musl_arch}-linux-musl-cross.tgz"
          done
      - name: Run tests
        run: |
          # Optional, use this if you have musl targets to compile
          for musl_arch in x86_64 aarch64 riscv64
          do
            export PATH="$(pwd)/${musl_arch}-linux-musl-cross/bin:${PATH}"
          done

          mix deps.get
          MIX_ENV=test mix test
      - name: Create precompiled library
        run: |
          export ELIXIR_MAKE_CACHE_DIR=$(pwd)/cache
          mkdir -p "${ELIXIR_MAKE_CACHE_DIR}"
          mix elixir_make.precompile
      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          draft: true
          files: |
            cache/*.tar.gz

  macos:
    runs-on: macos-latest
    env:
      MIX_ENV: "prod"
      OTP_VERSION: ${{ matrix.pair.otp }}
      ELIXIR_VERSION: ${{ matrix.pair.elixir }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - pair:
              elixir: 1.13
              otp: 22
          - pair:
              elixir: 1.16
              otp: 24
          - pair:
              elixir: 1.18
              otp: 27
    steps:
      - uses: actions/checkout@v4
      - name: Install erlang and elixir
        run: |
          brew install mise protobuf
          mise use -g erlang@${OTP_VERSION}
          mise use -g elixir@${ELIXIR_VERSION}
          mix local.hex --force
          mix local.rebar --force
      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-
      - name: Run tests
        run: |
          mix deps.get
          MIX_ENV=test mix test
      - name: Create precompiled library
        run: |
          export ELIXIR_MAKE_CACHE_DIR=$(pwd)/cache
          mkdir -p "${ELIXIR_MAKE_CACHE_DIR}"
          mix elixir_make.precompile
      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          draft: true
          files: |
            cache/*.tar.gz
